{"version":3,"file":"static/webpack/static/development/pages/houses/[id].js.f589931c5218bfcf81ae.hot-update.js","sources":["webpack:///./components/DayRangePicker.js"],"sourcesContent":["import { useState } from 'react';\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\nimport dateFnsFormat from 'date-fns/format';\nimport dateFnsParse from 'date-fns/parse';\nimport { DateUtils } from 'react-day-picker';\n\nconst parseDate = (str, format, locale) => {\n  const parsed = dateFnsParse(str, format, new Date(), { locale })\n  return DateUtils.isDate(parsed) ? parsed : null\n}\n\nconst formatDate = (date, format, locale) => dateFnsFormat(date, format, { locale })\n\nconst format = 'dd MMM yyyy';\n\nexport default () => (\n  <div className='date-range-picker-container'>\n    <div>\n      <label>From:</label>\n      <DayPickerInput \n        formatDate={formatDate}\n        format={format}\n        parseDate={parseDate}\n        placeholder={`${dateFnsFormat(new Date(), format)}`}\n\n        dayPickerProps={{\n          modifiers: {\n            disabled: {\n              before: new Date()\n            }\n          }\n        }}\n      />\n    </div>\n    <div>\n      <label>To:</label>\n      <DayPickerInput \n        formatDate={formatDate}\n        format={format}\n        parseDate={parseDate}\n        placeholder={`${dateFnsFormat(new Date(), format)}`}\n\n        dayPickerProps={{\n          modifiers: {\n            disabled: {\n              before: new Date()\n            }\n          }\n        }}\n      />\n    </div>\n\n    <style jsx>{`\n      .date-range-picker-container div {\n        display: grid;\n        border: 1px solid #ddd;\n        grid-template-columns: 30% 70%;\n        padding: 10px;\n      }\n      label {\n        padding-top: 10px;\n      }\n    `}</style>\n\n    <style jsx global>{`\n      .DayPickerInput input {\n        width: 120px;\n        padding: 10px;\n        font-size: 16px;\n      }\n    `}</style>\n  </div>\n)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AADA;AADA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AADA;AADA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;;;A","sourceRoot":""}